// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheatricalPlayersRefactoringKata.Data;

#nullable disable

namespace TheatricalPlayersRefactoringKata.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240917144154_AddGenre")]
    partial class AddGenre
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.33");

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Data.Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Data.Domain.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("428c7836-71db-4a71-b0a7-23e4cfe1323a"),
                            CreatedAt = new DateTime(2024, 9, 17, 11, 41, 53, 922, DateTimeKind.Local).AddTicks(4137),
                            Name = "comedy",
                            UpdatedAt = new DateTime(2024, 9, 17, 11, 41, 53, 922, DateTimeKind.Local).AddTicks(4147)
                        },
                        new
                        {
                            Id = new Guid("f69d02bb-ba41-4b5a-9dae-6bbea7e07b93"),
                            CreatedAt = new DateTime(2024, 9, 17, 11, 41, 53, 922, DateTimeKind.Local).AddTicks(4149),
                            Name = "tragedy",
                            UpdatedAt = new DateTime(2024, 9, 17, 11, 41, 53, 922, DateTimeKind.Local).AddTicks(4149)
                        },
                        new
                        {
                            Id = new Guid("b770c8e2-cc35-45db-849a-c330e1a009ad"),
                            CreatedAt = new DateTime(2024, 9, 17, 11, 41, 53, 922, DateTimeKind.Local).AddTicks(4150),
                            Name = "history",
                            UpdatedAt = new DateTime(2024, 9, 17, 11, 41, 53, 922, DateTimeKind.Local).AddTicks(4150)
                        });
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Data.Domain.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Data.Domain.Performance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Audience")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PlayId1");

                    b.ToTable("Performances");
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Data.Domain.Play", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Lines")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Plays");
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Data.Domain.Invoice", b =>
                {
                    b.HasOne("TheatricalPlayersRefactoringKata.Data.Domain.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Data.Domain.Performance", b =>
                {
                    b.HasOne("TheatricalPlayersRefactoringKata.Data.Domain.Invoice", null)
                        .WithMany("Performances")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("TheatricalPlayersRefactoringKata.Data.Domain.Play", "Play")
                        .WithMany()
                        .HasForeignKey("PlayId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Play");
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Data.Domain.Play", b =>
                {
                    b.HasOne("TheatricalPlayersRefactoringKata.Data.Domain.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Data.Domain.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Data.Domain.Invoice", b =>
                {
                    b.Navigation("Performances");
                });
#pragma warning restore 612, 618
        }
    }
}
